parameters:
  TFPATH: $(terraform.path)
  STATE_KEY: $(admin.azureDevOpsProject)-$(ENVIRONMENT).tfstate
  STORAGE_ACCOUNT: $(terraform.storageAccount)
  AZDO_SERVICE_CONNECTION: $(admin.azureConnection)
  AZDO_ORGANIZATION: $(admin.azureDevOpsOrganization)
  AZDO_PROJECT: $(admin.azureDevOpsProject)
  terraformVersion: $(TERRAFORM_VERSION)
  terraformBackendStorageAccount: $(terraform.storageAccount)

steps:
  - checkout: self
  - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
    displayName: Install Terraform
    inputs:
      terraformVersion: ${{parameters.terraformVersion}}
  - download: current
    artifact: 'tfplan'
  - script: |
     echo "------------${BUILD_BUILDNUMBER}--------------"
     echo ${BUILD_BUILDNUMBER}
     mkdir -p ${{parameters.STATE_KEY}}/Terraform 
     tar -xzvf tfplan/${{parameters.STATE_KEY}}.tar.gz --directory ${{parameters.STATE_KEY}}/Terraform
    displayName: 'Extract Artifact to ${{parameters.STATE_KEY}}/Terraform'
    workingDirectory: '$(Pipeline.Workspace)'
  - script: |
     if [[ ! -f  .terraform/terraform.tfstate ]] ; then
         echo 'terraform.tfstate (.terraform/terraform.tfstate) is not there, aborting.'
         exit
     else
       cat .terraform/terraform.tfstate
     fi
    workingDirectory: '$(Pipeline.Workspace)/${{parameters.STATE_KEY}}/Terraform'
    displayName: 'Check for terraform.tfstate'
  - task: AzureCLI@1
    displayName: 'Setup Authentication'
    inputs:
      azureSubscription: ${{parameters.AZDO_SERVICE_CONNECTION}}
      addSpnToEnvironment: true
      scriptLocation: inlineScript
      failOnStandardError: 'true'
      inlineScript: |   
        echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID]$(az account show --query="id" -o tsv)"
        echo "##vso[task.setvariable variable=ARM_CLIENT_ID]${servicePrincipalId}"
        echo "##vso[task.setvariable variable=ARM_CLIENT_SECRET]${servicePrincipalKey}"
        echo "##vso[task.setvariable variable=ARM_TENANT_ID]$(az account show --query="tenantId" -o tsv)"
        echo "##vso[task.setvariable variable=ARM_ACCESS_KEY]$(az storage account keys list -n ${{parameters.terraformBackendStorageAccount}} --query="[0].value" -o tsv)"
  - script: |
      git config --global --list | grep url. | awk -F '.instead' '{print $1}' | while read line
      do
        echo $line
      git config --global --remove-section $line
      done
      git config --global url."https://azdo:$(System.AccessToken)@dev.azure.com/organization".insteadOf https://dev.azure.com/organization
      git config --global url."https://azdo:$(System.AccessToken)@organization".insteadOf https://organization
      git init
    displayName: 'Redirect git URLs to use the Access Token So Modules Can Be Pulled In'
  - script: |
      terraform apply  -no-color -input=false ${BUILD_BUILDNUMBER}.tfplan
    displayName: 'Terraform Apply'
    workingDirectory: '$(Pipeline.Workspace)/${{parameters.STATE_KEY}}/Terraform'
    env:
      TF_IN_AUTOMATION: true
      TF_VAR_subscription_id: "$(ARM_SUBSCRIPTION_ID)"
      TF_VAR_client_id: "$(ARM_CLIENT_ID)"
      TF_VAR_client_secret: "$(ARM_CLIENT_SECRET)"
      TF_VAR_tenant_id: "$(ARM_TENANT_ID)"
      TF_VAR_vm_username: "$(vm_username)"
      TF_VAR_vm_password: "$(vm_password)"
  - script: |
     git config --global --remove-section url.https://azdo:$(System.AccessToken)@dev.azure.com/organization
     git config --global --remove-section url.https://azdo:$(System.AccessToken)@organization
    displayName: 'Remove git URL Redirect'
    condition: failed()