parameters:
  azdoOrganization: $(admin.azureDevOpsOrganization)
  azdoProject: $(admin.azureDevOpsProject)
  terraformVersion: $(TERRAFORM_VERSION)
  terraformStateKey: "$(admin.azureDevOpsProject)-$(ENVIRONMENT).tfstate"
  terraformDirectory: $(terraform.path)
  terraformBackendServiceConnection: Terraform
  terraformEnvironmentServiceConnection: Terraform
  terraformBackendResourceGroup: $(terraform.resourceGroup)
  terraformBackendStorageAccount: $(terraform.storageAccount)
  terraformBackendStorageContainer: $(terraform.storageAccountContainer)
  terraformBackendLocation: $(terraform.backendLocation)
  
jobs:
- job: Plan
  displayName: 'Terraform Plan'
  pool:
    vmImage: 'ubuntu-latest'
  workspace:
    clean: all
  steps:
    - checkout: self
      clean: true
      persistCredentials: true
    - task: AzureCLI@1
      displayName: Set Terraform backend
      # condition: and(succeeded(), eq('${{ parameters.provisionStorage }}', true))
      inputs:
        azureSubscription: ${{ parameters.terraformBackendServiceConnection }}
        scriptLocation: inlineScript
        inlineScript: |
          set -eu  # fail on error
          RG='${{ parameters.terraformBackendResourceGroup }}'
          export AZURE_STORAGE_ACCOUNT='${{ parameters.terraformBackendStorageAccount }}'
          export AZURE_STORAGE_KEY="$(az storage account keys list -g "$RG" -n "$AZURE_STORAGE_ACCOUNT" --query '[0].value' -o tsv)"
          if test -z "$AZURE_STORAGE_KEY"; then
            az configure --defaults group="$RG" location='${{ parameters.terraformBackendLocation }}'
            az group create -n "$RG" -o none
            az storage account create -n "$AZURE_STORAGE_ACCOUNT" -o none
            export AZURE_STORAGE_KEY="$(az storage account keys list -g "$RG" -n "$AZURE_STORAGE_ACCOUNT" --query '[0].value' -o tsv)"
          fi
          container='${{ parameters.terraformBackendStorageContainer }}'
          if ! az storage container show -n "$container" -o none 2>/dev/null; then
            az storage container create -n "$container" -o none
          fi
          blob='${{ parameters.terraformStateKey }}'
          if [[ $(az storage blob exists -c "$container" -n "$blob" --query exists) = "true" ]]; then
            if [[ $(az storage blob show -c "$container" -n "$blob" --query "properties.lease.status=='locked'") = "true" ]]; then
              echo "State is leased"
              lock_jwt=$(az storage blob show -c "$container" -n "$blob" --query metadata.terraformlockid -o tsv)
              if [ "$lock_jwt" != "" ]; then
                lock_json=$(base64 -d <<< "$lock_jwt")
                echo "State is locked"
                jq . <<< "$lock_json"
              fi
              if [ "${TERRAFORM_BREAK_LEASE:-}" != "" ]; then
                az storage blob lease break -c "$container" -b "$blob"
              else
                echo "If you're really sure you want to break the lease, rerun the pipeline with variable TERRAFORM_BREAK_LEASE set to 1."
                exit 1
              fi
            fi
          fi
        addSpnToEnvironment: true
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
      displayName: Install Terraform
      inputs:
        terraformVersion: ${{parameters.terraformVersion}}
    - task: DownloadSecureFile@1
      name: gitprivssh
      displayName: 'Download private key for git access'
      inputs:
        secureFile: gitkey
    # cat $(gitprivssh.secureFilePath) to show the key
    - script: |
        chmod 400 $(gitprivssh.secureFilePath)
    - task: AzureCLI@1
      displayName: 'Setup Authentication'
      inputs:
        azureSubscription: ${{ parameters.terraformEnvironmentServiceConnection }}
        addSpnToEnvironment: true
        scriptLocation: inlineScript
        failOnStandardError: 'true'
        inlineScript: |   
          echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID]$(az account show --query="id" -o tsv)"
          echo "##vso[task.setvariable variable=ARM_CLIENT_ID]${servicePrincipalId}"
          echo "##vso[task.setvariable variable=ARM_CLIENT_SECRET]${servicePrincipalKey}"
          echo "##vso[task.setvariable variable=ARM_TENANT_ID]$(az account show --query="tenantId" -o tsv)"
          echo "##vso[task.setvariable variable=ARM_ACCESS_KEY]$(az storage account keys list -n ${{parameters.terraformBackendStorageAccount}} --query="[0].value" -o tsv)"
    - script: |
        git config --global --list | grep url. | awk -F '.instead' '{print $1}' | while read line
        do
          echo $line
        git config --global --remove-section $line
        done
        git config --global url."https://azdo:$(System.AccessToken)@dev.azure.com/organization".insteadOf https://dev.azure.com/organization
        git config --global url."https://azdo:$(System.AccessToken)@organization".insteadOf https://organization
        git init
      displayName: 'Redirect git URLs to use the Access Token So Modules Can Be Pulled In'
    - script: |
        set -eux  # fail on error
        eval `ssh-agent -s`
        ssh-add /home/vsts/work/_temp/gitkey
        terraform init \
          -backend-config=storage_account_name=${{ parameters.terraformBackendStorageAccount }} \
          -backend-config=container_name=${{ parameters.terraformBackendStorageContainer }} \
          -backend-config=key=${{ parameters.terraformStateKey }} \
          -backend-config=resource_group_name=${{ parameters.terraformBackendResourceGroup }} \
          -backend-config=subscription_id=$ARM_SUBSCRIPTION_ID \
          -backend-config=tenant_id=$ARM_TENANT_ID \
          -backend-config=client_id=$ARM_CLIENT_ID \
          -backend-config=client_secret="$ARM_CLIENT_SECRET" \
          -no-color \
          -input=false
        echo "------------------------------------build number--------------------"
        echo ${BUILD_BUILDNUMBER}
        terraform plan -out=${BUILD_BUILDNUMBER}.tfplan -no-color -input=false
      displayName: 'Terraform Plan'
      workingDirectory: ${{parameters.terraformDirectory}}
      env:
        TF_IN_AUTOMATION: true
        TF_VAR_subscription_id: "$(ARM_SUBSCRIPTION_ID)"
        TF_VAR_client_id: "$(ARM_CLIENT_ID)"
        TF_VAR_client_secret: "$(ARM_CLIENT_SECRET)"
        TF_VAR_tenant_id: "$(ARM_TENANT_ID)"
        TF_VAR_vm_username: "$(vm_username)"
        TF_VAR_vm_password: "$(vm_password)"
    - script: |
        echo "Compressing ${{parameters.terraformDirectory}} directory..."
        tar -czf ${{ parameters.terraformStateKey }}.tar.gz -C ${{parameters.terraformDirectory}} .
      displayName: 'Compress ${{parameters.terraformDirectory}} Artifact'
    - publish: ${{ parameters.terraformStateKey }}.tar.gz
      artifact: 'tfplan'
    - script: |
        git config --global --remove-section url.https://azdo:$(System.AccessToken)@dev.azure.com/organization
        git config --global --remove-section url.https://azdo:$(System.AccessToken)@organization
        displayName: 'Remove git URL Redirect'
        condition: failed()