jobs:
  - job: Plan
    displayName: "Terraform Plan"
    pool:
    ${{ if eq('${{ settings.agentpool }}','') }}:
      vmImage: 'ubuntu-latest'
    ${{ if gt(length('${{ settings.agentpool2 }}'),5) }}:
      name: $(settings.agentpool2)
    steps:
      - checkout: pipeline-terraform
        clean: true
        persistCredentials: true
      - task: AzureCLI@2
        displayName: Set Terraform backend
        inputs:
          azureSubscription: $(admin.azureConnection)
          scriptType: bash
          scriptPath: scripts/initialize-terraform-backend.sh
          addSpnToEnvironment: true
        env:
          terraformBackendLocation: $(terraform.backendLocation)
          terraformBackendResourceGroup: $(terraform.remoteStateFileResourceGroup)
          terraformBackendStorageAccount: $(terraform.remoteStateFileStorageAccount)
          terraformBackendStorageContainer: $(terraform.remoteStateFileBlobContainer)
          terraformRemoteStateFile: $(terraform.remoteStateFile)
      - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
        displayName: Install Terraform
        inputs:
          terraformVersion: $(terraform.version)
      - task: Bash@3
        displayName: "Clone terraform code for deployment"
        inputs:
          filePath: scripts/clone-repo.sh
        env:
          gitToken: $(git.token)
          targetGitOrganization: $(admin.azureGithubClientOrganization)
          targetDir: $(terraform.path)
          targetProject: $(settings.project)
          cloneUrl: $(settings.cloneSourceTerraformCode)
          branchName: $(settings.branch)
      - task: AzureCLI@2
        displayName: "Setup Authentication"
        inputs:
          azureSubscription: $(admin.azureEnvironmentConnection)
          scriptType: bash
          addSpnToEnvironment: true
          failOnStandardError: "true"
          scriptPath: scripts/set-variables.sh
        env:
          terraformBackendStorageAccount: $(terraform.remoteStateFileStorageAccount)
          targetGitOrganization: $(admin.azureDevOpsOrganization)
          gitToken: $(git.token)
          addRedirect: True
      - task: Bash@3
        displayName: "Terraform Plan"
        inputs:
          workingDirectory: $(terraform.path)
          filePath: scripts/terraform-init.sh
        env:
          terraformBackendResourceGroup: $(terraform.remoteStateFileResourceGroup)
          terraformBackendStorageAccount: $(terraform.remoteStateFileStorageAccount)
          terraformBackendStorageContainer: $(terraform.remoteStateFileBlobContainer)
          terraformRemoteStateFile: $(terraform.remoteStateFile)
          terraformWorkingDir: $(terraform.workdir)
          ARM_SUBSCRIPTION_ID: $ARM_SUBSCRIPTION_ID
          ARM_TENANT_ID: $ARM_TENANT_ID
          ARM_CLIENT_ID: $ARM_CLIENT_ID
          ARM_CLIENT_SECRET: $ARM_CLIENT_SECRET
          gitToken: $(git.token)
          terraformShowFlag: "False"
          terraformDestroy: $(terraform.destroy)
      - task: Bash@3
        displayName: "Compress $(terraform.path) Artifact"
        inputs:
          filePath: scripts/compressworkdir.sh
        env:
          terraformRemoteStateFile: $(terraform.remoteStateFile)
          terraformWorkingDir: $(terraform.workdir)
          terraformPath: $(terraform.path)
      - publish: $(terraform.remoteStateFile).tar.gz
        artifact: "tfplan"
        