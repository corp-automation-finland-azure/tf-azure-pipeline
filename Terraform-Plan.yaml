parameters:
  terraformRemoteStateFileResourceGroup: "tf-state-$(customer.shortname)-rg"
  terraformRemoteStateFileStorageAccount: "tfstate$(customer.shortname)sa"
  terraformRemoteStateFileBlobContainer: "tf-state-$(customer.shortname)-bc"
  terraformRemoteStateFile: "$(admin.azureDevOpsProject)-$(customer.shortname)-$(ENVIRONMENT).tfstate"
  # as it is now terraformPath must match the github repository name which is NOT intuitive
  # maybe need new variable for repo name?
  terraformPath: "$(customer.shortname)-$(azure.enterpriseScaleSubscription)"

jobs:
  - job: Plan
    displayName: "Terraform Plan"
    pool: "az-pipeline-terraform-agent-pool"
    steps:
      - checkout: pipeline-terraform
        clean: true
        persistCredentials: true
      - task: AzureCLI@2
        displayName: Set Terraform backend
        inputs:
          azureSubscription: $(admin.azureConnection)
          scriptType: bash
          scriptPath: scripts/initialize-terraform-backend.sh
          addSpnToEnvironment: true
        env:
          terraformBackendLocation: $(terraform.backendLocation)
          terraformBackendResourceGroup: ${{ parameters.terraformRemoteStateFileResourceGroup }}
          terraformBackendStorageAccount: ${{ parameters.terraformRemoteStateFileStorageAccount }}
          terraformBackendStorageContainer: ${{ parameters.terraformRemoteStateFileBlobContainer }}
          terraformRemoteStateFile: ${{ parameters.terraformRemoteStateFile }}
      - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
        displayName: Install Terraform
        inputs:
          terraformVersion: $(terraform.version)
      - task: Bash@3
        displayName: "Clone terraform code for deployment"
        inputs:
          filePath: scripts/clone-repo.sh
        env:
          gitToken: $(git.token)
          targetGitOrganization: $(admin.azureGithubClientOrganization)
          targetDir: ${{ parameters.terraformPath }}
          cloneUrl: $(settings.cloneSourceTerraformCode)
          branchName: $(settings.branch)
      - task: AzureCLI@2
        displayName: "Setup Authentication"
        inputs:
          azureSubscription: $(admin.azureEnvironmentConnection)
          scriptType: bash
          addSpnToEnvironment: true
          failOnStandardError: "true"
          scriptPath: scripts/set-variables.sh
        env:
          terraformBackendStorageAccount: ${{ parameters.terraformRemoteStateFileStorageAccount }}
          targetGitOrganization: $(admin.azureDevOpsOrganization)
          gitToken: $(git.token)
      - task: Bash@3
        displayName: "Terraform Plan"
        inputs:
          workingDirectory: ${{ parameters.terraformPath }}
          filePath: scripts/terraform-init.sh
        env:
          terraformBackendResourceGroup: ${{ parameters.terraformRemoteStateFileResourceGroup }}
          terraformBackendStorageAccount: ${{ parameters.terraformRemoteStateFileStorageAccount }}
          terraformBackendStorageContainer: ${{ parameters.terraformRemoteStateFileBlobContainer }}
          terraformRemoteStateFile: ${{ parameters.terraformRemoteStateFile }}
          ARM_SUBSCRIPTION_ID: $ARM_SUBSCRIPTION_ID
          ARM_TENANT_ID: $ARM_TENANT_ID
          ARM_CLIENT_ID: $ARM_CLIENT_ID
          ARM_CLIENT_SECRET: $ARM_CLIENT_SECRET
          gitToken: $(git.token)
          terraformShowFlag: "False"
          terraformDestroy: $(terraform.destroy)
      - script: |
          echo "Compressing ${{ parameters.terraformPath }} directory..."
          tar -czf ${{ parameters.terraformRemoteStateFile }}.tar.gz -C ${{ parameters.terraformPath }} .
          echo "##[debug] Compress terraform directory done"
        displayName: "Compress ${{ parameters.terraformPath }} Artifact"
      - publish: ${{ parameters.terraformRemoteStateFile }}.tar.gz
        artifact: "tfplan"
        