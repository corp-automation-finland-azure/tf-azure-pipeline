parameters:
  azdoOrganization: $(admin.azureDevOpsOrganization)
  azdoProject: $(admin.azureDevOpsProject)
  gitToken: $(git.token)
  terraformVersion: $(terraform.version)
  terraformRemoteStateFile: "$(admin.azureDevOpsProject)-$(ENVIRONMENT).tfstate"
  terraformDirectory: $(terraform.path)
  terraformBackendServiceConnection: $(admin.azureConnection)
  terraformEnvironmentServiceConnection: $(admin.azureConnection)
  terraformBackendResourceGroup: $(terraform.resourceGroup)
  terraformBackendStorageAccount: $(terraform.storageAccount)
  terraformBackendStorageContainer: $(terraform.storageAccountContainer)
  terraformBackendLocation: $(terraform.backendLocation)

jobs:
- deployment: Apply
  displayName: 'Terraform Apply'
  environment: Test
  pool: 'az-pipeline-terraform-agent-pool'
  workspace:
    clean: all
  strategy:
    runOnce:
      deploy:
        steps:
          - checkout: self
          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
            displayName: Install Terraform
            inputs:
              terraformVersion: ${{parameters.terraformVersion}}
          - download: current
            artifact: 'tfplan'
          - script: |
              echo "------------${BUILD_BUILDNUMBER}--------------"
              echo ${BUILD_BUILDNUMBER}
              mkdir -p ${{parameters.terraformRemoteStateFile}}/Terraform 
              tar -xzvf tfplan/${{parameters.terraformRemoteStateFile}}.tar.gz --directory ${{parameters.terraformRemoteStateFile}}/Terraform
              displayName: 'Extract Artifact to ${{parameters.terraformRemoteStateFile}}/Terraform'
              workingDirectory: '$(Pipeline.Workspace)'
          - script: |
              if [[ ! -f  .terraform/terraform.tfstate ]] ; then
                  echo 'terraform.tfstate (.terraform/terraform.tfstate) is not there, aborting.'
                  exit
              else
                cat .terraform/terraform.tfstate
              fi
            workingDirectory: '$(Pipeline.Workspace)/${{parameters.terraformRemoteStateFile}}/Terraform'
            displayName: 'Check for terraform.tfstate'
          - task: AzureCLI@1
            displayName: 'Setup Authentication'
            inputs:
              azureSubscription: ${{ parameters.terraformEnvironmentServiceConnection }}
              addSpnToEnvironment: true
              scriptLocation: inlineScript
              failOnStandardError: 'true'
              inlineScript: |   
                echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID]$(az account show --query="id" -o tsv)"
                echo "##vso[task.setvariable variable=ARM_CLIENT_ID]${servicePrincipalId}"
                echo "##vso[task.setvariable variable=ARM_CLIENT_SECRET]${servicePrincipalKey}"
                echo "##vso[task.setvariable variable=ARM_TENANT_ID]$(az account show --query="tenantId" -o tsv)"
                echo "##vso[task.setvariable variable=ARM_ACCESS_KEY]$(az storage account keys list -n ${{parameters.terraformBackendStorageAccount}} --query="[0].value" -o tsv)"
                echo "##vso[task.setvariable variable=GIT_TOKEN]${{parameters.gitToken}}"
          - script: |
              git config --global --list | grep url. | awk -F '.instead' '{print $1}' | while read line
              do
                echo $line
              git config --global --remove-section $line
              done
              git config --global url."https://azdo:$GIT_TOKEN@dev.azure.com/${{parameters.azdoOrganization}}".insteadOf https://dev.azure.com/${{parameters.azdoOrganization}}
              git config --global url."https://azdo:$GIT_TOKEN@${{parameters.azdoOrganization}}".insteadOf https://${{parameters.azdoOrganization}}
              git init
            displayName: 'Redirect git URLs to use the Access Token So Modules Can Be Pulled In'
          - script: |
              terraform apply  -no-color -input=false ${BUILD_BUILDNUMBER}.tfplan
            displayName: 'Terraform Apply'
            workingDirectory: '$(Pipeline.Workspace)/${{parameters.terraformRemoteStateFile}}/Terraform'
            env:
              TF_IN_AUTOMATION: true
              TF_VAR_subscription_id: "$(ARM_SUBSCRIPTION_ID)"
              TF_VAR_client_id: "$(ARM_CLIENT_ID)"
              TF_VAR_client_secret: "$(ARM_CLIENT_SECRET)"
              TF_VAR_tenant_id: "$(ARM_TENANT_ID)"
              TF_VAR_vm_username: "$(vm_username)"
              TF_VAR_vm_password: "$(vm_password)"
          - script: |
              git config --global --remove-section url.https://azdo:$GIT_TOKEN@dev.azure.com/${{parameters.azdoOrganization}}
              git config --global --remove-section url.https://azdo:$GIT_TOKEN@${{parameters.azdoOrganization}}
              displayName: 'Remove git URL Redirect'
              condition: failed()