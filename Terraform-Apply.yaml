parameters:
  terraformRemoteStateFileStorageAccount: "tfstate$(customer.shortname)sa"
  terraformRemoteStateFile: "$(admin.azureDevOpsProject)-$(customer.shortname)-$(ENVIRONMENT).tfstate"

jobs:
- deployment: Apply
  displayName: 'Terraform Apply'
  environment: Test
  pool: 'az-pipeline-terraform-agent-pool'
  workspace:
    clean: all
  strategy:
    runOnce:
      deploy:
        steps:
          - checkout: pipeline-terraform
          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
            displayName: Install Terraform
            inputs:
              terraformVersion: $(terraform.version)
          - download: current
            artifact: 'tfplan'
          - script: |
              echo "##[debug] ------------${BUILD_BUILDNUMBER}--------------"
              mkdir -p ${{ parameters.terraformRemoteStateFile }}/Terraform 
              tar -xzvf tfplan/${{ parameters.terraformRemoteStateFile }}.tar.gz --directory ${{ parameters.terraformRemoteStateFile }}/Terraform
              echo "##[debug] Extract terraform state file complete"
            displayName: 'Extract Artifact to ${{ parameters.terraformRemoteStateFile }}/Terraform'
            workingDirectory: '$(Pipeline.Workspace)'
          - script: |
             if [[ ! -f  .terraform/terraform.tfstate ]] ; then
                echo "##vso[task.logissue type=error] terraform.tfstate (.terraform/terraform.tfstate) is not here, aborting."
                exit
             else
               cat .terraform/terraform.tfstate
             fi
            workingDirectory: '$(Pipeline.Workspace)/${{ parameters.terraformRemoteStateFile }}/Terraform'
            displayName: 'Check for terraform.tfstate'
          - task: AzureCLI@2
            displayName: "Setup Authentication"
            inputs:
              azureSubscription: $(admin.azureEnvironmentConnection)
              scriptType: bash
              addSpnToEnvironment: true
              failOnStandardError: "true"
              scriptPath: scripts/set-variables.sh
            env:
              terraformBackendStorageAccount: ${{ parameters.terraformRemoteStateFileStorageAccount }}
              targetGitOrganization: $(admin.azureDevOpsOrganization)
              gitToken: $(git.token)
          - script: |
              terraform apply  -no-color -input=false ${BUILD_BUILDNUMBER}.tfplan
            displayName: 'Terraform Apply'
            workingDirectory: '$(Pipeline.Workspace)/${{ parameters.terraformRemoteStateFile }}/Terraform'
            env:
              TF_IN_AUTOMATION: true
              TF_VAR_subscription_id: "$(ARM_SUBSCRIPTION_ID)"
              TF_VAR_client_id: "$(ARM_CLIENT_ID)"
              TF_VAR_client_secret: "$(ARM_CLIENT_SECRET)"
              TF_VAR_tenant_id: "$(ARM_TENANT_ID)"
              TF_VAR_example_variable: "$(example_variable)"
          - script: |
              git config --global --remove-section url.https://azdo:$(git.token)@dev.azure.com/$(admin.azureDevOpsOrganization)
              git config --global --remove-section url.https://azdo:$(git.token)@$(admin.azureDevOpsOrganization)
            displayName: 'Remove git URL Redirect'
            condition: failed()
