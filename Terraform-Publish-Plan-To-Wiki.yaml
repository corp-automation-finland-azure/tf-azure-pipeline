parameters:
  terraformRemoteStateFile: "$(admin.azureDevOpsProject)-$(ENVIRONMENT).tfstate"
  
jobs:
- job: Publish
  displayName: 'Publish to Wiki'
  pool: 'az-pipeline-terraform-agent-pool'
  steps:
  - checkout: $(settings.pipelineProject)
    persistCredentials: true
  - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
    displayName: Install Terraform
    inputs:
      terraformVersion: $(terraform.version)
  - download: current
    artifact: 'tfplan'
  - script: |
     mkdir -p ${{parameters.terraformRemoteStateFile}}/Terraform 
     tar -xzvf tfplan/${{parameters.terraformRemoteStateFile}}.tar.gz --directory ${{parameters.terraformRemoteStateFile}}/Terraform
    displayName: 'Extract Artifact to ${{parameters.terraformRemoteStateFile}}/Terraform'
    workingDirectory: '$(Pipeline.Workspace)'
  - script: |
     if [[ ! -f  .terraform/terraform.tfstate ]] ; then
         echo 'terraform.tfstate (.terraform/terraform.tfstate) is not there, aborting.'
         exit
     else
       cat .terraform/terraform.tfstate
     fi
    workingDirectory: '$(Pipeline.Workspace)/${{parameters.terraformRemoteStateFile}}/Terraform'
    displayName: 'Check for terraform.tfstate'

  # need Azcli for setup authentication as it requires az login
  - task: AzureCLI@2
    displayName: "Setup Authentication"
    inputs:
      azureSubscription: $(admin.azureEnvironmentConnection)
      scriptType: bash
      addSpnToEnvironment: true
      failOnStandardError: "true"
      scriptPath: scripts/set-variables.sh
    env:
      terraformBackendStorageAccount: $(terraform.storageAccount)
      gitToken: $(git.token)

  - script: |
     mkdir -p $(terraform.path)
     tar -xzvf tfplan/${{ parameters.terraformRemoteStateFile }}.tar.gz --directory $(terraform.path)
    workingDirectory: '$(Pipeline.Workspace)'
  
  - task: Bash@3
    displayName: "Git Clone Wiki"
    continueOnError: 'true'
    inputs:
      filePath: scripts/clone-repo.sh
      workingDirectory: '$(Agent.WorkFolder)'
    env:
      gitToken: $(git.tokenAzureDevops)
      targetGitOrganization: $(admin.azureDevOpsOrganization)
      targetDir: $(admin.wikiProject)
      targetProject: $(settings.project)
      cloneUrl: $(settings.cloneSourceWiki)

  - task: Bash@3
    displayName: "'Terraform Show - Output'"
    inputs:
      filePath: scripts/terraform-init.sh
      workingDirectory: '$(Pipeline.Workspace)/$(terraform.path)'
    env:
      terraformBackendStorageAccount: $(terraform.storageAccount)
      terraformBackendStorageContainer: $(terraform.storageAccountContainer)
      terraformRemoteStateFile: ${{ parameters.terraformRemoteStateFile }}
      terraformBackendResourceGroup: $(terraform.resourceGroup)
      ARM_SUBSCRIPTION_ID: $ARM_SUBSCRIPTION_ID
      ARM_TENANT_ID: $ARM_TENANT_ID
      ARM_CLIENT_ID: $ARM_CLIENT_ID
      ARM_CLIENT_SECRET: $ARM_CLIENT_SECRET
      terraformShowFlag: "True"
  - task: Bash@3
    displayName: "Write Terraform Show to Wiki"
    inputs:
      failOnStandardError: "true"
      workingDirectory: $(Agent.WorkFolder)
      filePath: scripts/terraform-write-to-wiki.sh
    env:
      terraformDirectory: $(terraform.path)
      wikiDirectory: $(settings.wikireleasedirectory)
  - task: Bash@3
    displayName: "Archive Old Builds"
    inputs:
      workingDirectory: $(Agent.WorkFolder)/wiki/$(settings.wikireleasedirectory)
      filePath: scripts/archive-old-builds.sh
    env:
      wikiDirectory: $(settings.wikireleasedirectory)

  - task: Bash@3
    displayName: "Git Push Wiki - View Link Here'"
    inputs:
      workingDirectory: '$(Agent.WorkFolder)/wiki'
      filePath: scripts/push-to-wiki.sh
    env:
      gitToken: $(git.tokenAzureDevops)
      targetGitOrganization: $(admin.azureDevOpsOrganization)
      targetDir: $(admin.wikiProject)
      targetProject: $(settings.project)
      wikiDirectory: $(settings.wikireleasedirectory)