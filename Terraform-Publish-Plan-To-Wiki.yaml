jobs:
- job: Publish
  displayName: 'Publish to Wiki'
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - checkout: pipeline-terraform
    persistCredentials: true
  - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
    displayName: Install Terraform
    inputs:
      terraformVersion: $(terraform.version)
  - download: current
    artifact: 'tfplan'
  - script: |
     mkdir -p $(terraform.remoteStateFile)/Terraform 
     tar -xzvf tfplan/$(terraform.remoteStateFile).tar.gz --directory $(terraform.remoteStateFile)/Terraform
     echo "##[debug] Uncompress terraform directory done"
    displayName: 'Extract Artifact to $(terraform.remoteStateFile)/Terraform'
    workingDirectory: '$(Pipeline.Workspace)'
  - script: |
     if [[ ! -f  .terraform/terraform.tfstate ]] ; then
        echo "##vso[task.logissue type=error] terraform.tfstate (.terraform/terraform.tfstate) is not here, aborting."
        exit
     else
       cat .terraform/terraform.tfstate
     fi
    workingDirectory: '$(Pipeline.Workspace)/$(terraform.remoteStateFile)/Terraform'
    displayName: 'Check for terraform.tfstate'
  - task: AzureCLI@2
    displayName: "Setup Authentication"
    inputs:
      azureSubscription: $(admin.azureEnvironmentConnection)
      scriptType: bash
      addSpnToEnvironment: true
      failOnStandardError: "false"
      addRedirect: false
      scriptPath: scripts/set-variables.sh
    env:
      terraformBackendStorageAccount: $(terraform.remoteStateFileStorageAccount)
      targetGitOrganization: $(admin.azureDevOpsOrganization)
      gitToken: $(git.token)
  - script: |
     mkdir -p $(terraform.path)
     tar -xzvf tfplan/$(terraform.remoteStateFile).tar.gz --directory $(terraform.path)
     echo "##[debug] Compress terraform state file done"
    workingDirectory: '$(Pipeline.Workspace)'
  - task: Bash@3
    displayName: "Git Clone Wiki"
    continueOnError: 'true'
    inputs:
      filePath: scripts/clone-repo.sh
      workingDirectory: '$(Agent.WorkFolder)'
    env:
      gitToken: $(git.tokenAzureDevops)
      targetGitOrganization: $(admin.azureDevOpsOrganization)
      targetDir: $(admin.wikiProject)
      targetProject: $(settings.project)
      cloneUrl: $(settings.cloneSourceWiki)
      branchName: $(settings.branch)
  - task: Bash@3
    displayName: "'Terraform Show - Output'"
    inputs:
      filePath: scripts/terraform-init.sh
      workingDirectory: '$(Pipeline.Workspace)/$(terraform.path)'
    env:
      terraformBackendResourceGroup: $(terraform.remoteStateFileResourceGroup)
      terraformBackendStorageAccount: $(terraform.remoteStateFileStorageAccount)
      terraformBackendStorageContainer: $(terraform.remoteStateFileBlobContainer)
      terraformRemoteStateFile: $(terraform.remoteStateFile)
      ARM_SUBSCRIPTION_ID: $ARM_SUBSCRIPTION_ID
      ARM_TENANT_ID: $ARM_TENANT_ID
      ARM_CLIENT_ID: $ARM_CLIENT_ID
      ARM_CLIENT_SECRET: $ARM_CLIENT_SECRET
      TF_VAR_GIT_TOKEN: $(git.token)
      terraformShowFlag: "True"
      terraformDestroy: "False"
  - task: Bash@3
    displayName: "Write Terraform Show to Wiki"
    inputs:
      failOnStandardError: "true"
      workingDirectory: $(Agent.WorkFolder)
      filePath: scripts/terraform-write-to-wiki.sh
    env:
      terraformDirectory: $(terraform.path)
      wikiDirectory: $(settings.wikireleasedirectory)
  - task: Bash@3
    displayName: "Archive Old Builds"
    inputs:
      workingDirectory: $(Agent.WorkFolder)/wiki/$(settings.wikireleasedirectory)
      filePath: scripts/archive-old-builds.sh
    env:
      wikiDirectory: $(settings.wikireleasedirectory)
  - task: Bash@3
    displayName: "Git Push Wiki - View Link Here'"
    inputs:
      workingDirectory: '$(Agent.WorkFolder)/wiki'
      filePath: scripts/push-to-wiki.sh
    env:
      gitToken: $(git.tokenAzureDevops)
      targetGitOrganization: $(admin.azureDevOpsOrganization)
      targetDir: $(admin.wikiProject)
      targetProject: $(settings.project)
      wikiDirectory: $(settings.wikireleasedirectory)