parameters:
  azdoOrganization: $(admin.azureDevOpsOrganization)
  azdoProject: $(admin.azureDevOpsProject)
  gitKey: $(git.key)
  gitToken: $(git.token)
  terraformVersion: $(terraform.version)
  terraformRemoteStateFile: "$(admin.azureDevOpsProject)-$(ENVIRONMENT).tfstate"
  terraformDirectory: $(terraform.path)
  terraformBackendServiceConnection: $(admin.azureConnection)
  terraformEnvironmentServiceConnection: $(admin.azureConnection)
  terraformBackendResourceGroup: $(terraform.resourceGroup)
  terraformBackendStorageAccount: $(terraform.storageAccount)
  terraformBackendStorageContainer: $(terraform.storageAccountContainer)
  terraformBackendLocation: $(terraform.backendLocation)
  
jobs:
- job: Publish
  displayName: 'Publish to Wiki'
  pool: 'az-pipeline-terraform-agent-pool'
  steps:
  - checkout: self
    persistCredentials: true
  - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
    displayName: Install Terraform
    inputs:
      terraformVersion: ${{parameters.terraformVersion}}
  - download: current
    artifact: 'tfplan'
  - script: |
     mkdir -p ${{parameters.terraformRemoteStateFile}}/Terraform 
     tar -xzvf tfplan/${{parameters.terraformRemoteStateFile}}.tar.gz --directory ${{parameters.terraformRemoteStateFile}}/Terraform
    displayName: 'Extract Artifact to ${{parameters.terraformRemoteStateFile}}/Terraform'
    workingDirectory: '$(Pipeline.Workspace)'
  - script: |
     if [[ ! -f  .terraform/terraform.tfstate ]] ; then
         echo 'terraform.tfstate (.terraform/terraform.tfstate) is not there, aborting.'
         exit
     else
       cat .terraform/terraform.tfstate
     fi
    workingDirectory: '$(Pipeline.Workspace)/${{parameters.terraformRemoteStateFile}}/Terraform'
    displayName: 'Check for terraform.tfstate'
  - task: AzureCLI@1
    displayName: 'Setup Authentication'
    inputs:
      azureSubscription: ${{ parameters.terraformBackendServiceConnection }}
      addSpnToEnvironment: true
      scriptLocation: inlineScript
      failOnStandardError: 'true'
      inlineScript: |   
       echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID]$(az account show --query="id" -o tsv)"
       echo "##vso[task.setvariable variable=ARM_CLIENT_ID]${servicePrincipalId}"
       echo "##vso[task.setvariable variable=ARM_CLIENT_SECRET]${servicePrincipalKey}"
       echo "##vso[task.setvariable variable=ARM_TENANT_ID]$(az account show --query="tenantId" -o tsv)"
       echo "##vso[task.setvariable variable=ARM_ACCESS_KEY]$(az storage account keys list -n ${{parameters.terraformBackendStorageAccount}} --query="[0].value" -o tsv)"
  - script: |
     mkdir -p ${{ parameters.terraformDirectory }}
     tar -xzvf tfplan/${{ parameters.terraformRemoteStateFile }}.tar.gz --directory ${{ parameters.terraformDirectory }}
    workingDirectory: '$(Pipeline.Workspace)'

  - script: |
     git config --global user.email "azdo@organization.com"
     git config --global user.name "azdo"
     git config --list
    displayName: 'Git Config'

  - script: |
     if [ -d "wiki" ]; then rm -rf wiki; fi
     echo $(System.AccessToken)
     git clone https://${{parameters.gitToken}}@git.evry.cloud/${{parameters.azdoOrganization}}/${{parameters.azdoProject}}/ wiki
    workingDirectory: '$(Agent.WorkFolder)'
    displayName: 'Git Clone Wiki'
    continueOnError: 'true'
  - script: |
     set -eux  # fail on error
     eval `ssh-agent -s`
     terraform init \
       -backend-config=storage_account_name=${{ parameters.terraformBackendStorageAccount }} \
       -backend-config=container_name=${{ parameters.terraformBackendStorageContainer }} \
       -backend-config=key=${{ parameters.terraformRemoteStateFile }} \
       -backend-config=resource_group_name=${{ parameters.terraformBackendResourceGroup }} \
       -backend-config=subscription_id=$ARM_SUBSCRIPTION_ID \
       -backend-config=tenant_id=$ARM_TENANT_ID \
       -backend-config=client_id=$ARM_CLIENT_ID \
       -backend-config=client_secret="$ARM_CLIENT_SECRET" \
       -no-color \
       -input=false
     terraform show -no-color ${BUILD_BUILDNUMBER}.tfplan
     terraform show -no-color ${BUILD_BUILDNUMBER}.tfplan > tfplan.out
    workingDirectory: '$(Pipeline.Workspace)/${{ parameters.terraformDirectory }}'
    displayName: 'Terraform Show - Output'

  - script: |
     bn=$(Build.DefinitionName)
     build_name=${bn// /_}
     template="wiki/Builds/Template.md"
     file_name="wiki/Builds/${build_name}/$(Build.BuildNumber).md"
     tfout="$(Pipeline.Workspace)/${{ parameters.terraformDirectory }}/tfplan.out"
     mkdir -p "wiki/Builds/${build_name}"

     cat ${template} > ${file_name}
     cat <<EOT >> ${file_name}

     ## Build Details
     <table>
     <tr>
        <td><b>Build Reason</b></td>
        <td>$(Build.Reason)</td>
     </tr>
     <tr>
        <td><b>Requestor</b></td>
        <td>$(Build.RequestedFor)</td>
     </tr>
     <tr>
        <td><b>Repository</b></td>
        <td><a href=$(Build.Repository.Uri)>$(Build.Repository.Uri)</a></td>
     </tr>
     <tr>
        <td><b>Branch</b></td>
        <td>$(Build.SourceBranchName)</td>
     </tr>
     <tr>
        <td><b>Latest Commit</b></td>
        <td><a href=$(Build.Repository.Uri)/commit/$(Build.SourceVersion)>$(Build.SourceVersion)</a></td>
     </tr>
     <tr>
        <td><b>Latest Commit Message</b></td>
        <td><pre>$(Build.SourceVersionMessage)</pre></td>
     </tr>
     </table>

     ## Terraform Show Output

     \`\`\` sh
     EOT

     cat ${tfout} >> ${file_name}
     cat <<EOT >> ${file_name}
     \`\`\`
     EOT
    workingDirectory: '$(Agent.WorkFolder)'
    displayName: 'Write Terraform Show to Wiki'

  - script: |
     # WORKING DIRECTORY IS $(Agent.WorkFolder)/wiki/Builds
     bn=$(Build.DefinitionName)
     build_name=${bn// /_}

     # CD INTO THE build_name DIRECTORY
     cd ${build_name}

     # CREATE THE Archives DIRECTORY IF IT DOESN'T EXIST
     mkdir -p "Archives"

     # FIND ALL FILES IN THE CURRENT WORKING DIRECTORY | 
     #   REVERSE SORT | 
     #   GET ALL BUT THE LATEST 10 FILES |
     #   MOVE THEM TO THE Archives FOLDER
     find * -maxdepth 0 -type f | sort -nr | awk 'NR > 10' | xargs -i mv {} ./Archives/
    workingDirectory: '$(Agent.WorkFolder)/wiki/Builds'
    displayName: 'Archive Old Builds'

  - script: |
     git pull
     git add .
     git commit -m "Build $(Build.BuildNumber)"
     git ls-files
     git push https://azdo:$(System.AccessToken)@git.evry.cloud/${{parameters.azdoOrganization}}/${{parameters.azdoProject}}/_git/
     echo "### Link To Build ###"
     echo "https://git.evry.cloud/${{parameters.azdoOrganization}}/${{parameters.azdoProject}}/_wiki/wikis/Terraform-Plans/4/Terraform-Plans.wiki?wikiVersion=GBwikiMaster&pagePath=%2FBuilds%2F$(Build.DefinitionName)%2F$(Build.BuildNumber)"
    workingDirectory: '$(Agent.WorkFolder)/wiki'
    displayName: 'Git Push Wiki - View Link Here'